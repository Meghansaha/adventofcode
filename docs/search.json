[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Advent of Code",
    "section": "",
    "text": "— Day 1: Trebuchet?! — (Prompt)\n\n\n\n\n\n— Day 1: Trebuchet?! —\nSomething is wrong with global snow production, and you’ve been selected to take a look. The Elves have even given you a map; on it, they’ve used stars to mark the top fifty locations that are likely to be having problems.\nYou’ve been doing this long enough to know that to restore snow operations, you need to check all fifty stars by December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou try to ask why they can’t just use a weather machine (“not powerful enough”) and where they’re even sending you (“the sky”) and why your map looks mostly blank (“you sure ask a lot of questions”) and hang on did you just say the sky (“of course, where do you think snow comes from”) when you realize that the Elves are already loading you into a trebuchet (“please hold still, we need to strap you in”).\nAs they’re making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n1abc2 pqr3stu8vwx a1b2c3d4e5f treb7uchet\nIn this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\nConsider your entire calibration document. What is the sum of all of the calibration values?\n\n\n\n\n\n\n\n\n\n— Day 1: Trebuchet?! — (Proposed Solution)\n\n\n\n\n\n\n# Advent of Code - Day 1-------------------------------------------------------\n\n#=============================================================================#\n# Library Load-in--------------------------------------------------------------\n#=============================================================================#\nlibrary(tidyverse)\nlibrary(here)\nlibrary(glue)\nlibrary(stringi)\n\n#=============================================================================#\n# Data Load-in-----------------------------------------------------------------\n#=============================================================================#\ndf_input &lt;-\n  read_csv(\n    here(\n      \"scripts\",\n      \"2023\",\n      \"inputs\",\n      \"input-01.csv\"\n    ),\n    show_col_types = FALSE\n  )\n\n#=============================================================================#\n# Part 1 Solution--------------------------------------------------------------\n#=============================================================================#\ndf_input |&gt;\n  mutate(\n    pulled_number = str_replace_all(input, \"[:alpha:]\", \"\"),\n    first_number = str_extract(pulled_number, \"^.{1}\"),\n    last_number = str_extract(pulled_number, \".{1}$\"),\n    final_number = glue(\"{first_number}{last_number}\") |&gt; as.numeric()\n  ) |&gt;\n  summarize(final_number = sum(final_number)) |&gt;\n  pull()\n\n[1] 55607\n\n#=============================================================================#\n# Part 2 Solution--------------------------------------------------------------\n#=============================================================================#\n# Create a vector of number maps-----------------------------------------------\nvec_digits &lt;-\n  c(\n    \"one\" = \"1\",\n    \"two\" = \"2\",\n    \"three\" = \"3\",\n    \"four\" = \"4\",\n    \"five\" = \"5\",\n    \"six\" = \"6\",\n    \"seven\" = \"7\",\n    \"eight\" = \"8\",\n    \"nine\" = \"9\"\n  ) \n\n# Create a \"reversed\" vector of number maps------------------------------------\nrev_vec_digits &lt;-\n  c(\n    \"eno\" = \"1\",\n    \"owt\" = \"2\",\n    \"eerht\" = \"3\",\n    \"ruof\" = \"4\",\n    \"evif\" = \"5\",\n    \"xis\" = \"6\",\n    \"neves\" = \"7\",\n    \"thgie\" = \"8\",\n    \"enin\" = \"9\" \n  )\n\n# Create a custom function to find the \"first\" string match-------------------- \nstr_first &lt;- function(string, pattern){\n  pattern[as_tibble(str_locate(string, pattern)) |&gt;\n            mutate(index = row_number()) |&gt;\n            filter(!is.na(start)) |&gt;\n            filter(start == min(start)) |&gt;\n            pull(index)]\n}\n\n# Throw it all together and hope that it works---------------------------------\ndf_input |&gt;\n  # Need this for the custom fx\n  rowwise() |&gt;\n  # Need to flag if an observation has a \"string\" number-----------------------\n  mutate(\n  number_string = any(str_detect(input, c(names(vec_digits), names(rev_vec_digits))))\n  ) |&gt;\n  # Apply the custom fx only to rows that have the string numbers--------------\n  mutate(\n  ## Grab the first string number----\n    first_string_number = case_when(\n    !number_string ~ NA_character_,\n    number_string ~ list(str_first(input, names(vec_digits))) |&gt; as.character()),\n  ## Grab the last string number by reversing it----\n    last_string_number = case_when(\n    !number_string ~ NA_character_,\n    number_string ~ list(str_first(stri_reverse(input), names(rev_vec_digits))) |&gt; as.character()),\n  # Pull the actual numeric digits from the string----\n    pulled_digits = str_replace_all(input, \"[:alpha:]\", \"\"),\n  # Pull the first actual digit----\n    first_digit = str_extract(pulled_digits, \"^.{1}\"),\n  # Pull the last actual digit----\n    last_digit = str_extract(pulled_digits, \".{1}$\"),\n  # Finally, calc the \"real\" numbers by finding the first matches---- \n  ## Forwards---\n    first_real_number = str_first(input, c(first_string_number, first_digit)),\n  ## And reversed---\n    last_real_number = str_first(stri_reverse(input), c(last_string_number, last_digit)),\n  # Retrieve the \"actual\" numbers from the digit vecs-----\n    first_real_number = case_when(\n    first_real_number %in% names(vec_digits) ~ vec_digits[first_real_number],\n    .default = first_real_number),\n    last_real_number = case_when(\n    last_real_number %in% names(rev_vec_digits) ~ vec_digits[as.numeric(rev_vec_digits[last_real_number])],\n    .default = last_real_number),\n  # Glue it together----\n    final_number = glue(\"{first_real_number}{last_real_number}\") |&gt; as.numeric()\n  ) |&gt;\n    ungroup() |&gt;\n  # Add it up----\n    summarize(final_number = sum(final_number)) |&gt;\n  # spit it out----\n    pull()\n\n[1] 55291\n\n\n\n\n\n\n\n\n\n\n\n— Day 2: Cube Conundrum — (Prompt)\n\n\n\n\n\n— Day 2: Cube Conundrum —\nYou’re launched high into the atmosphere! The apex of your trajectory just barely reaches the surface of a large island floating in the sky. You gently land in a fluffy pile of leaves. It’s quite cold, but you don’t see much snow. An Elf runs over to greet you.\nThe Elf explains that you’ve arrived at Snow Island and apologizes for the lack of snow. He’ll be happy to explain the situation, but it’s a bit of a walk, so you have some time. They don’t get many visitors up here; would you like to play a game in the meantime?\nAs you walk, the Elf shows you a small bag and some cubes which are either red, green, or blue. Each time you play this game, he will hide a secret number of cubes of each color in the bag, and your goal is to figure out information about the number of cubes.\nTo get information, once a bag has been loaded with cubes, the Elf will reach into the bag, grab a handful of random cubes, show them to you, and then put them back in the bag. He’ll do this a few times per game.\nYou play several games and record the information from each game (your puzzle input). Each game is listed with its ID number (like the 11 in Game 11: …) followed by a semicolon-separated list of subsets of cubes that were revealed from the bag (like 3 red, 5 green, 4 blue).\nFor example, the record of a few games might look like this:\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\nIn game 1, three sets of cubes are revealed from the bag (and then put back again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes.\nThe Elf would first like to know which games would have been possible if the bag contained only 12 red cubes, 13 green cubes, and 14 blue cubes?\nIn the example above, games 1, 2, and 5 would have been possible if the bag had been loaded with that configuration. However, game 3 would have been impossible because at one point the Elf showed you 20 red cubes at once; similarly, game 4 would also have been impossible because the Elf showed you 15 blue cubes at once. If you add up the IDs of the games that would have been possible, you get 8.\nDetermine which games would have been possible if the bag had been loaded with only 12 red cubes, 13 green cubes, and 14 blue cubes. What is the sum of the IDs of those games?\n\n\n\n\n\n\n\n\n\n— Day 2: Cube Conundrum — (Proposed Solution)\n\n\n\n\n\n\n# Advent of Code - Day 2-------------------------------------------------------\n\n#=============================================================================#\n# Library Load-in--------------------------------------------------------------\n#=============================================================================#\nlibrary(tidyverse)\nlibrary(here)\n\n#=============================================================================#\n# Data Load-in-----------------------------------------------------------------\n#=============================================================================#\ndf_input &lt;- \n  read_csv(\n    here(\n      \"scripts\",\n      \"2023\",\n      \"inputs\",\n      \"input-02.csv\"\n    ),\n    show_col_types = FALSE\n  )\n\n#=============================================================================#\n# Part 1 Solution--------------------------------------------------------------\n#=============================================================================#\ndf_input |&gt;\n  rowwise() |&gt;\n  # Pull out the max numbers for each color in each game\n  mutate(\n    game_id = str_extract(input, \"Game \\\\d+\"),\n    game_id = str_replace_all(game_id, \"[:alpha:]\", \"\"),\n    red_ns = str_extract_all(input, \" \\\\d+ red\"),\n    red_max = max(as.numeric(str_replace_all(red_ns, \"[:alpha:]\", \"\"))),\n    blue_ns = str_extract_all(input, \" \\\\d+ blue\"),\n    blue_max = max(as.numeric(str_replace_all(blue_ns, \"[:alpha:]\", \"\"))),\n    green_ns = str_extract_all(input, \" \\\\d+ green\"),\n    green_max = max(as.numeric(str_replace_all(green_ns, \"[:alpha:]\", \"\")))\n    ) |&gt;\n      separate_longer_delim(input, \";\") |&gt;\n  select(game_id, ends_with(\"_max\")) |&gt;\n  mutate(across(everything(), ~as.numeric(.))) |&gt;\n  ungroup() |&gt;\n  # Filter for the max number of colors asked for\n  filter(red_max &lt;= 12 &\n         blue_max &lt;= 14 &\n         green_max &lt;= 13) |&gt;\n  # Pull the unique rows as the manip caused dupes\n  distinct() |&gt;\n  # Add it up\n  summarize(game_id = sum(game_id)) |&gt;\n  # Spit it out\n  pull()\n\n[1] 2278\n\n#=============================================================================#\n# Part 2 Solution--------------------------------------------------------------\n#=============================================================================#\ndf_input |&gt;\n  rowwise() |&gt;\n  # Same as above\n  mutate(\n    game_id = str_extract(input, \"Game \\\\d+\"),\n    game_id = str_replace_all(game_id, \"[:alpha:]\", \"\"),\n    red_ns = str_extract_all(input, \" \\\\d+ red\"),\n    red_max = max(as.numeric(str_replace_all(red_ns, \"[:alpha:]\", \"\"))),\n    blue_ns = str_extract_all(input, \" \\\\d+ blue\"),\n    blue_max = max(as.numeric(str_replace_all(blue_ns, \"[:alpha:]\", \"\"))),\n    green_ns = str_extract_all(input, \" \\\\d+ green\"),\n    green_max = max(as.numeric(str_replace_all(green_ns, \"[:alpha:]\", \"\")))\n  ) |&gt;\n  separate_longer_delim(input, \";\") |&gt;\n  select(game_id, ends_with(\"_max\")) |&gt;\n  mutate(across(everything(), ~as.numeric(.))) |&gt;\n  ungroup() |&gt;\n  # Pull the uniques as manip caused dupes\n  distinct() |&gt;\n  # Calc the powers\n  mutate(cubed_total = red_max * blue_max * green_max) |&gt;\n  # Add it up\n  summarize(cubed_total = sum(cubed_total)) |&gt;\n  # Spit it out\n  pull()\n\n[1] 67953"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]